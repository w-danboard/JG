// console.log(Object.keys(global));
// Buffer 为了node能处理二进制 buffer可以和字符串任意转换

// 进制转化的问题
// 编码 1个汉字 有几个字节？ 
// utf8（一个汉字3个字节）
// gbk （一个汉字2个字符串）

// ---------------------------------------------------------

// ASCCI 1个字节表示 字母 127个字符串来表示出了 美国人所有的内容 十进制
// 1个字节 是由8个位组成
// 十进制和二进制的转化 11111111 二进制中最大的位值就是1 一个字母 只占用一个字节

// GB2312 2字节 超过127 我就认为是汉字 （255-127）*（255-100）

// unicode 编码 可变的 没推行

// utf8; 3个字节

// ------------------------------------------------------------

// 2禁止转化成16进制 作为buffer

let buf = Buffer.from('王琳');
// console.log(buf);

// -------------------------------------------------------------

// 怎么把 16进制转化 成10进制

// 把任意进制转化成的方法如下
// console.log((125).toString(2))

// 把2进制转化成十进制
// console.log(parseInt('111111', '2'))

// -------------------------------------------------------------

// base64 所有的路径都可以用base64替换 fileReader(H5定义它作为文件API的重要成员，用于读取文件)
// base64的大小会比以前大 1/3
// base64 只是一种编码 并不能加密
// md5 摘要算法

// 一个汉字 3个字节 * 8个位 = base64 6 * 4
console.log(Buffer.from('珠')); // e7 8f a0
// 0b 10 020 0x
console.log((0xe7).toString(2)) // 11100111
console.log((0x8f).toString(2)) // 10001111
console.log((0xa0).toString(2)) // 10100000

// -------------------------------------------------------------
parseInt('11100111', 2)
parseInt('10001111', 2)
parseInt('10100000', 2)

// --------------------------------------------------------------

console.log(Buffer.from('珠').toString('base64'))

// 浏览器的事件环 node事件环 微任务 宏任务 promise  知道执行的顺序流
// global 常用属性
// commonjs规范 三种模块 核心 文件 第三方
// 核心模块 fs path events util
// 进制转化 0.1 + 0.2 = 0.3 为什么

// 如何将小数转换成 二进制  小数转换 乘2取整法